{"version":3,"file":"DynamicImports.js","sourceRoot":"","sources":["../../src/DynamicImports.ts"],"names":[],"mappings":";AAAA,gEAAgE;AAChE,uEAAuE;;;AAIvE,mCAAmC;AAEnC,eAAe;AACf,SAAgB,cAAc,CAAC,GACkB;IAE7C,yEAAyE;IACzE,iFAAiF;IACjF,IAAI,OAAO,KAAK,KAAK,WAAW,IAAI,gBAAQ,CAAC,MAAM,EAAE;QACjD,iHAAiH;QACjH,8DAA8D;QAC9D,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC;QAErD,IAAI,OAAO,KAAK,KAAK,WAAW,EAAE;YAC9B,8DAA8D;YAC9D,GAAG,CAAC,UAAU,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC;SAC1C;aAAM;YACH,mCAAmC;YACnC,GAAG,CAAC,UAAU,GAAG,KAAK,CAAC;SAC1B;QAED,qEAAqE;QACrE,2FAA2F;QAC3F,8DAA8D;QAC9D,GAAG,CAAC,UAAU,GAAG,OAAO,CAAC,cAAc,CAAC,CAAC,GAAG,CAAC,UAAU,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC;QACnE,OAAO,IAAI,CAAC;KACf;IACD,OAAO,KAAK,CAAC;AACjB,CAAC;AAzBD,wCAyBC;AAED,eAAe;AACf,SAAgB,wBAAwB,CAAC,GAAqF;IAC1H,IAAI,OAAO,eAAe,KAAK,WAAW,EAAE;QACxC,gGAAgG;QAChG,GAAG,CAAC,oBAAoB,GAAG,OAAO,CAAC,kBAAkB,CAAC,CAAC;QACvD,OAAO,IAAI,CAAC;KACf;IACD,OAAO,KAAK,CAAC;AACjB,CAAC;AAPD,4DAOC;AAED,eAAe;AACf,SAAgB,KAAK;IACjB,OAAO,OAAO,CAAC,IAAI,CAAC,CAAC;AACzB,CAAC;AAFD,sBAEC;AAED,eAAe;AACf,SAAgB,cAAc;IAC1B,OAAO,OAAO,CAAC,aAAa,CAAC,CAAC;AAClC,CAAC;AAFD,wCAEC","sourcesContent":["// Licensed to the .NET Foundation under one or more agreements.\r\n// The .NET Foundation licenses this file to you under the MIT license.\r\n\r\n// @ts-ignore: This will be removed from built files and is here to make the types available during dev work\r\nimport { CookieJar } from \"@types/tough-cookie\";\r\nimport { Platform } from \"./Utils\";\r\n\r\n/** @private */\r\nexport function configureFetch(obj: { _fetchType?: (input: RequestInfo, init?: RequestInit) => Promise<Response>,\r\n                               _jar?: CookieJar }): boolean\r\n{\r\n    // Node added a fetch implementation to the global scope starting in v18.\r\n    // We need to add a cookie jar in node to be able to share cookies with WebSocket\r\n    if (typeof fetch === \"undefined\" || Platform.isNode) {\r\n        // Cookies aren't automatically handled in Node so we need to add a CookieJar to preserve cookies across requests\r\n        // eslint-disable-next-line @typescript-eslint/no-var-requires\r\n        obj._jar = new (require(\"tough-cookie\")).CookieJar();\r\n\r\n        if (typeof fetch === \"undefined\") {\r\n            // eslint-disable-next-line @typescript-eslint/no-var-requires\r\n            obj._fetchType = require(\"node-fetch\");\r\n        } else {\r\n            // Use fetch from Node if available\r\n            obj._fetchType = fetch;\r\n        }\r\n\r\n        // node-fetch doesn't have a nice API for getting and setting cookies\r\n        // fetch-cookie will wrap a fetch implementation with a default CookieJar or a provided one\r\n        // eslint-disable-next-line @typescript-eslint/no-var-requires\r\n        obj._fetchType = require(\"fetch-cookie\")(obj._fetchType, obj._jar);\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n/** @private */\r\nexport function configureAbortController(obj: { _abortControllerType: { prototype: AbortController, new(): AbortController } }): boolean {\r\n    if (typeof AbortController === \"undefined\") {\r\n        // Node needs EventListener methods on AbortController which our custom polyfill doesn't provide\r\n        obj._abortControllerType = require(\"abort-controller\");\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\n\r\n/** @private */\r\nexport function getWS(): any {\r\n    return require(\"ws\");\r\n}\r\n\r\n/** @private */\r\nexport function getEventSource(): any {\r\n    return require(\"eventsource\");\r\n}"]}